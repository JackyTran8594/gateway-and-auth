server:
  port: 8055

eureka:
  client:
    serviceUrl:
            defaultZone: http://localhost:8052/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: localhost


spring:
  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true
    banner-mode: off
  application:
    name: ansv-gateway
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=Access-Control-Allow-Origin, *
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
              - OPTIONS
              - HEAD
            allowedHeaders: "*"
      routes:
        - id: app1
          uri: http://localhost:8091
          predicates:
            - Path=/app1/**
        - id: app2
          uri: http://localhost:8090
          predicates:
            - Path=/app2/**
        - id: task-management
          uri: http://localhost:8098
          predicates:
            - Path=/taskManagement/**
            - Method=GET,POST,PUT,DELETE,OPTIONS,HEAD
#        - id: authorization
#          uri: http://localhost:8053
#          predicates:
#            - Path=/authorization/**
#            - Method=GET,POST,PUT,DELETE
      httpserver:
        wiretap: true
  ldap:
    embedded:
      ldif: classpath:test-server.ldif
      base-dn: dc=springframework,dc=org
      port: 8389
      validation:
        enabled: true
    server:
      base: dc=springframework,dc=org
    authen:
      url: ldap://localhost:8389
      managerDn: uid=admin,ou=people,dc=springframework,dc=org
      managerPassword: 123456
      filter: uid
      password: userPassword
  datasource:
    url: jdbc:postgresql://localhost:5432/Authorization
    username: postgres
    password: root
    jpa:
      properties:
        hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
      show-sql: true
      hibernate:
        ddl-auto: none
  liquibase:
    enabled: false
    contexts: dev
  # redis configuration for caching
  cache:
    type: redis
    host: localhost
    port: 6379
#    password: 123456allow-bean-definition-overriding
    ssl: false
  # Rabbitmq properties
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtualHost: /
    exchange: task-management.req.events
    routingkey: detail.user.req
    queue: detail.user.task-management.req.queue
    exchange-received: task-management.res.events
    routingkey-received: detail.user.res
    queue-received: detail.user.task-management.res.queue

#redis
# cache configuration
resolved:
  cache:
    ttl: 60
    enabled: true


logging:
  level:
    reactor:
      netty: DEBUG
    org:
      springframework:
        cloud:
          gateway: TRACE

#jwttoken
app:
  jwtSecret: 9a02115a835ee03d5fb83cd8a468ea33e4090aaaec87f53c9fa54512bbef4db8dc656c82a315fa0c785c08b0134716b81ddcd0153d2a7556f2e154912cf5675f
  # miliseconds
#  tokenValidity: 3600000
  tokenValidity: 600000
  refreshTokenValidity: 604800000
  admin:
    username: adminansv
    password: 123456a@







